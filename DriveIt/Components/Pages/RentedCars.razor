@page "/moje-wypozyczenia"
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer

@using DriveIt.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authorization
@using DriveIt.Data
@using DriveIt.Services
@using DriveIt.Model
@using System.Security.Claims

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserAccessor UserAccessor
@inject RentalService RentalService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h1>Moje wypożyczenia</h1>
<RentalsComponent IsEmployee="false" RentalFunc="FinishRentalAsync" Rentals="Rentals"/>

@code {


    List<Rental> Rentals = [];


    protected override async Task OnInitializedAsync()
    {
        await LoadRentals();
    }

    private async Task FinishRentalAsync(Rental rental)
    {
        bool status = await RentalService.FinishRental(rental);

        if (status)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var requiredUser = authState.User;


            if (requiredUser is null || !requiredUser.Identity!.IsAuthenticated)
            {
                // Przekierowanie do logowania
                NavigationManager.NavigateTo("/Account/Login");
                return;
            }

            var userEmail = requiredUser.FindFirst(ClaimTypes.Email)?.Value;
            await RentalService.SendRentalFinishEmailAsync(userEmail, rental);
            await LoadRentals();
        }
        else
        {
            // TODO: Show error message
        }
    }


    private async Task LoadRentals()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext is null)
        {
            // TODO: Redirect to error page
            return;
        }


        var userId = UserAccessor.GetUserId(httpContext);

        if (userId is null)
        {
            // TODO: Redirect to login page
            return;
        }

        Guid userGuid = Guid.Parse(userId);

        Rentals = await RentalService.GetRentalsByUserIdAsync(userGuid);
    }
}
