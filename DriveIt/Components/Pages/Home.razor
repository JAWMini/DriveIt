@page "/"
@using DriveIt.Model
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@* Welcome to your new app. *@




@* <div style="display: flex; gap: 10px;">
    <select class="form-select" @bind=SelectedBrand>
        <option selected value="">Wybierz markę</option>
        @foreach (string brand in AvailableBrands)
        {
            <option value=@brand>@brand</option>
        }
    </select>

    <select class="form-select" @bind=SelectedModel>
        <option selected value="">Wybierz model</option>
        @foreach (string model in AvailableModels)
        {
            <option value=@model>@model</option>
        }
    </select>
</div> *@



<div class="row">
    <div class="col-md-9">
            <!-- Sekcja wyboru liczby elementów na stronę -->
@*             <div class="mb-3 d-flex justify-content-end">
                <label class="me-2" for="itemsPerPage">Elementy na stronę:</label>
                <select id="itemsPerPage" @bind="PageSize" class="form-select w-auto">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </div> *@
@*         <table class="table table-striped">
            <thead>
                <tr>
                    <th>Marka</th>
                    <th>Model</th>
                    <th>Rok produkcji</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Car car in PagedCars)
                {
                    <tr @onclick="() => NavigateToCarDetails(car)" style="cursor: pointer;">
                        <td>@car.Brand</td>
                        <td>@car.Model</td>
                        <td>@car.Year</td>
                    </tr>
                }
            </tbody>
        </table> *@

        <Grid TItem="Car"
              Class="table table-striped"
            AllowPaging="true"
              PageSizeSelectorVisible="true"
              PageSizeSelectorItems="@(new int[] { 5,10,20,30,50 })"
            AllowSorting="true"
            Data="FilteredCars"
            OnRowClick="OnCarClick"
            AllowRowClick="true"
            Responsive="true">

            <GridColumns>
                <GridColumn TItem="Car" HeaderText="Marka" SortKeySelector="item => item.Brand">@context.Brand</GridColumn>
                <GridColumn TItem="Car" HeaderText="Model" SortKeySelector="item => item.Model">@context.Model</GridColumn>
                <GridColumn TItem="Car" HeaderText="Rok produkcji" SortKeySelector="item => item.Year">@context.Year</GridColumn>
            </GridColumns>
            </Grid>

@*         <Pagination ActivePageNumber="@CurrentPage"
                    TotalPages="@TotalPages"
                    PageChanged="@((newPageNumber) => CurrentPage = newPageNumber)"
                    Alignment="Alignment.Center"
                    DisplayPages="10" /> *@
    </div>
    <div class="col-md-3">
        <button class="btn btn-secondary mb-3" @onclick="ClearFilters">Wyczyść filtry</button>
        <Accordion>
            <AccordionItem>
                <TitleTemplate>
                <h4 class="card-title">Filtrowanie</h4>
                </TitleTemplate>
                <Content>
                <h5 class="card-subtitle mb-2 mt-4">Marka</h5>
                @foreach (var brand in Cars.Select(c => c.Brand).Distinct())
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" checked="@SelectedBrandModels.Any(car => car.brand == brand)" id="@brand" @onchange="(e) => ToggleBrandSelection(brand, e)" />
                        <label class="form-check-label" for="@brand">@brand</label>
                    </div>
                    var models = Cars.Where(car => car.Brand == brand).Select(car => car.Model).Distinct();
                    <div style="margin-left: 20px;">
                        @foreach (var model in models)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" checked="@SelectedBrandModels.Any(car => car.brand == brand && car.model == model)" id="@model" @onchange="(e) => ToggleModelSelection(brand, model, e)" />
                                <label class="form-check-label" for="@model">@model</label>
                            </div>
                        }
                    </div>
                }

                <h5 class="mt-4">Rok produkcji</h5>
                <div class="mb-3">
                    <label for="minYear" class="form-label">Minimalny rok:</label>
                    <input type="number" class="form-control" id="minYear" @bind="MinYear" />
                </div>
                <div class="mb-3">
                    <label for="maxYear" class="form-label">Maksymalny rok:</label>
                    <input type="number" class="form-control" id="maxYear" @bind="MaxYear" />
                </div>
                    </Content>
                </AccordionItem>
        </Accordion>
    </div>
</div>






@code
{
    // Dodać zapytanie do kontrolera. To tylko szablon
    private async Task<GridDataProviderResult<Car>> CarDataProvider(GridDataProviderRequest<Car> request)
    {
        return await Task.FromResult(request.ApplyTo(FilteredCars));
    }
    List<Car> Cars = [];

    int? MinYear { get; set; } = null;
    int? MaxYear { get; set; } = null;

    HashSet<(string brand, string model)> SelectedBrandModels = [];

    IEnumerable<Car> FilteredCars => (from car in Cars
                                      where (SelectedBrandModels.Count == 0 || SelectedBrandModels.Contains((car.Brand, car.Model))) && (MinYear is null || car.Year >= MinYear) && (MaxYear is null || car.Year <= MaxYear)
                                      select car);


    private void NavigateToCarDetails(Car car)
    {
        // Przekierowanie do innej strony, np. na podstawie identyfikatora samochodu
        // NavigationManager.NavigateTo($"/car-details/{carId}");
        NavigationManager.NavigateTo($"/Counter");
    }

    private void OnCarClick(GridRowEventArgs<Car> args)
    {
        NavigateToCarDetails(args.Item);
    }



    // Funkcja do zaznaczania/odznaczania marek
    private void ToggleBrandSelection(string brand, object isChecked)
    {
        if ((bool)((ChangeEventArgs) isChecked)?.Value! == true)
        {
            var modelsToAdd = Cars.Where(car => car.Brand == brand).Select(car => (brand, car.Model));
            SelectedBrandModels.UnionWith(modelsToAdd);
        }
        else
        {
            SelectedBrandModels.RemoveWhere(car => car.brand == brand);
        }

        // CurrentPage = 1;
    }

    // Funkcja do zaznaczania/odznaczania modeli
    private void ToggleModelSelection(string brand, string model, object isChecked)
    {
        if ((bool)((ChangeEventArgs)isChecked)?.Value! == true)
        {
            SelectedBrandModels.Add((brand, model));
        }
        else
        {
            SelectedBrandModels.Remove((brand, model));
        }

        // CurrentPage = 1;
    }


    // private int CurrentPage = 1; // Aktualna strona
    // private int PageSize = 5; // Liczba elementów na stronę
    // private int TotalPages => (int)Math.Ceiling((double)FilteredCars.Count() / PageSize);

    // private IEnumerable<Car> PagedCars => FilteredCars
    //                                         .Skip((CurrentPage - 1) * PageSize)
    //                                         .Take(PageSize);

    // private void NavigateToPage(int page)
    // {
    //     CurrentPage = page;
    // }

    // private void NextPage()
    // {
    //     if (CurrentPage < TotalPages)
    //         ++CurrentPage;
    // }

    // private void PreviousPage()
    // {
    //     if (CurrentPage > 1)
    //         --CurrentPage;
    // }

    private void ClearFilters(MouseEventArgs e)
    {
        SelectedBrandModels.Clear();
        MinYear = null;
        MaxYear = null;
    }



    protected override void OnInitialized()
    {
        base.OnInitialized();
        Cars = new List<Car>
        {
            new Car("Toyota", "Corolla", 2010, new Guid()),
            new Car("Toyota", "Camry", 2012, new Guid()),
            new Car("Toyota", "RAV4", 2020, new Guid()),
            new Car("Honda", "Civic", 2015, new Guid()),
            new Car("Honda", "Accord", 2018, new Guid()),
            new Car("Honda", "CR-V", 2021, new Guid()),
            new Car("Ford", "Focus", 2018, new Guid()),
            new Car("Ford", "Fiesta", 2016, new Guid()),
            new Car("Ford", "Mustang", 2020, new Guid()),
            new Car("BMW", "X5", 2020, new Guid()),
            new Car("BMW", "X3", 2017, new Guid()),
            new Car("BMW", "3 Series", 2015, new Guid()),
            new Car("Audi", "A4", 2022, new Guid()),
            new Car("Audi", "Q5", 2019, new Guid()),
            new Car("Audi", "A6", 2016, new Guid()),
            new Car("Mercedes", "C-Class", 2019, new Guid()),
            new Car("Mercedes", "E-Class", 2021, new Guid()),
            new Car("Mercedes", "GLC", 2020, new Guid()),
            new Car("Volkswagen", "Golf", 2018, new Guid()),
            new Car("Volkswagen", "Passat", 2015, new Guid()),
            new Car("Volkswagen", "Tiguan", 2017, new Guid()),
            new Car("Toyota", "Yaris", 2021, new Guid()),
            new Car("Toyota", "Highlander", 2019, new Guid()),
            new Car("Ford", "Explorer", 2022, new Guid()),
            new Car("Honda", "Pilot", 2023, new Guid()),
            new Car("Audi", "A3", 2020, new Guid())
        };
    }

}