@page "/wypozyczenia";
@attribute [Authorize(Roles = "Employee")]
@rendermode InteractiveServer
@using DriveIt.Model;
@using DriveIt.Services;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Azure.Storage.Blobs
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.Text
@inject RentalService RentalService 



<h1>Wypożyczenia</h1>
<RentalsComponent IsEmployee="true" RentalFunc="AcceptRentalAsync" Rentals="Rentals"/>

<Modal @ref="modal" @onclose="HandleClose">
    <BodyTemplate>
    <div class="modal-dialog">
        <div class="modal-content p-4">
            <EditForm Model="model" FormName="return" OnValidSubmit="SubmitReturnAsync">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <!-- Description Input -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="model.Description"
                               class="form-control"
                               placeholder="Enter description" />
                    <label>Description</label>
                    <ValidationMessage For="() => model.Description" class="text-danger" />
                </div>

                <!-- File Input -->
                <div class="mb-3">
                    <label class="form-label">Select file</label>
                    <InputFile id="file"
                               OnChange="HandleFileSelected"
                               class="form-control" />
                    @if (model.FileName != null)
                    {
                        <div class="form-text">
                            Selected file: @model.FileName
                        </div>
                    }
                </div>

                <!-- Submit Button -->
                <button type="submit" class="btn btn-primary btn-lg w-100">
                    Submit
                </button>

                @if (!string.IsNullOrEmpty(uploadMessage))
                {
                    <div class="alert alert-success mt-3">
                        @uploadMessage
                    </div>
                }
            </EditForm>
        </div>
    </div>
    </BodyTemplate>
    
</Modal>

@code {
    List<Rental> Rentals = [];

    [SupplyParameterFromForm]
    private ReturnModel model { get; set; } = new();

    private Modal modal = default!;
    private string uploadMessage = string.Empty;   
    private TaskCompletionSource<bool>? modalTcs;

    protected override async Task OnInitializedAsync()
    {
        await LoadRentalsAsync();
    }

    private async Task LoadRentalsAsync()
    {
        Rentals = await RentalService.GetRentalsAsync();         
    }

    private async Task AcceptRentalAsync(Rental rental)
    {       
        modalTcs = new TaskCompletionSource<bool>();
        await modal.ShowAsync();    

        bool result = await modalTcs.Task;
        if(result)
        {
            bool status = await RentalService.AcceptRentalAsync(rental);
            if (status)
            {
                await LoadRentalsAsync();
            }
            else
            {
                // TODO: Show error message
            }
        }

    }

    private async Task SubmitReturnAsync()
    {
        if (model.Photo == null)
        {
            return;
        }
        var file = model.Photo;

        var connectionString = Environment.GetEnvironmentVariable("AZURE_BLOB_CONNECTION_STRING");
        var blobName = Environment.GetEnvironmentVariable("AZURE_BLOB_NAME");
        var containerClient = new BlobContainerClient(connectionString, blobName);

        await containerClient.CreateIfNotExistsAsync();

        var blobClient = containerClient.GetBlobClient(file.Name);
      

        using(var stream = file.OpenReadStream())
        {
            await blobClient.UploadAsync(stream, true);            
        }

        var textBlobName = Path.GetFileNameWithoutExtension(file.Name) + ".txt";

        var textBlobClient = containerClient.GetBlobClient(textBlobName);

        using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(model.Description)))
        {

            await textBlobClient.UploadAsync(stream, true);
        }


      

        uploadMessage = $"File uploaded successfully: {file.Name}";
        modalTcs?.SetResult(true);
        await modal.HideAsync();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            model.Photo = file;
            model.FileName = file.Name;            
        }
    }

    private async void HandleClose()
    {
        modalTcs?.SetResult(false);
        await modal.HideAsync();
    }

    sealed class ReturnModel
    {
        [Required(ErrorMessage = "Opis jest wymagany")]
        public String? Description { get; set; } = string.Empty;

        public IBrowserFile? Photo { get; set; }

        public String? FileName { get; set; }

    }

}
