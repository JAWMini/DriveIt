@page "/wypozyczenia";
@rendermode InteractiveServer
@using DriveIt.Model;
@using DriveIt.Services;
@inject RentalService RentalService


<h2 class="my-4">Aktywne wypożyczenia</h2>
@if(activeRentals.Any())
{
    
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Marka</th>
                    <th>Model</th>
                    <th>Rok produkcji</th>
                    <th>Data wypożyczenia</th>                   
                </tr>
            </thead>
            <tbody>
                @foreach (var rental in activeRentals)
                {
                    <tr>
                        <td>@rental.Car.Brand</td>
                        <td>@rental.Car.Model</td>
                        <td>@rental.Car.Year</td>
                        <td>@rental.ReturnDate</td>
                    </tr>
                }
            </tbody>
        </table>    
}
else
{
	<p>Brak aktywnych wypożyczeń.</p>
}
<h2 class="my-4">Samochody do zwrotu</h2>
@if(requestedRentals.Any())
{
	
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Marka</th>
					<th>Model</th>
					<th>Rok produkcji</th>
					<th>Data zwrotu</th>
                    <th>Zwróć</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var rental in requestedRentals)
				{
					<tr>
						<td>@rental.Car.Brand</td>
						<td>@rental.Car.Model</td>
						<td>@rental.Car.Year</td>
						<td>@rental.ReturnDate</td>
                        <td><button class="btn btn-danger" @onclick="() => FinishRental(rental)">Zaakceptuj zwrot</button></td>
					</tr>
				}
			</tbody>
		</table>    
}
else
{
	<p>Brak samochodów do zwrotu.</p>
}





@code {
    List<Rental> activeRentals = [];
    List<Rental> requestedRentals = [];
    protected override async Task OnInitializedAsync()
    {
        await LoadRentalsAsync();
    }

    private async Task LoadRentalsAsync()
    {
		activeRentals = await RentalService.GetActiveRentalsAsync();
        requestedRentals = await RentalService.GetRequestedRentalsAsync();            
	}

    private async Task FinishRental(Rental rental)
	{
		await RentalService.DeleteRentalAsync(rental);
		await LoadRentalsAsync();
	}
}
