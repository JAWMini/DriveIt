@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DriveIt.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>External Login</PageTitle>

<StatusMessage Message="@message" />

<h1>Register via external provider</h1>
<hr />

<div class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please complete your registration details and confirm your email address to activate your account.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Input" OnValidSubmit="@OnValidSubmitAsync" FormName="externalRegister" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- First Name -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" />
                <label for="first-name">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <!-- Last Name -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" />
                <label for="last-name">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <!-- Date of Birth -->
            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" class="form-control" placeholder="Date of Birth" />
                <label for="date-of-birth">Date of Birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>

            <!-- Driver License Year -->
            <div class="form-floating mb-3">
                <InputNumber @bind-Value="Input.DriverLicenseYear" class="form-control" placeholder="Driver License Year" />
                <label for="driver-license-year">Driver License Year</label>
                <ValidationMessage For="() => Input.DriverLicenseYear" class="text-danger" />
            </div>

            <!-- Email -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email." />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        // Obsługa błędów z dostawcy zewnętrznego
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
            return;
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
            return;
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Jeśli to jest callback (np. ?Action=LoginCallback)
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // Domyślnie, jeśli to nie jest callback, wracamy do /Account/Login
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    /// <summary>
    /// Obsługa callbacka - jeśli użytkownik już istnieje, zaloguj go.
    /// Jeśli nie istnieje, pozostaw go na stronie wypełniania formularza.
    /// </summary>
    private async Task OnLoginCallbackAsync()
    {
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // Jeśli nie ma konta, pozostajemy na stronie, aby użytkownik wypełnił formularz
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    /// <summary>
    /// Tworzymy konto w bazie danych bez hasła.
    /// </summary>
    private async Task OnValidSubmitAsync()
    {
        // Tworzymy obiekt Customer (dziedziczy po ApplicationUser)
        var customer = CreateCustomer();

        // Ustaw dane klienta
        customer.FirstName = Input.FirstName;
        customer.LastName = Input.LastName;
        customer.DateOfBirth = Input.DateOfBirth;
        customer.DriverLicenseYear = Input.DriverLicenseYear;

        // Ustaw nazwę użytkownika i email
        await UserStore.SetUserNameAsync(customer, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(customer, Input.Email, CancellationToken.None);

        // Tworzymy użytkownika w bazie bez hasła
        var result = await UserManager.CreateAsync(customer);
        if (!result.Succeeded)
        {
            message = $"Error: {string.Join(",", result.Errors.Select(e => e.Description))}";
            return;
        }

        // Dodajemy login zewnętrzny
        result = await UserManager.AddLoginAsync(customer, externalLoginInfo);
        if (!result.Succeeded)
        {
            message = $"Error: {string.Join(",", result.Errors.Select(e => e.Description))}";
            return;
        }

        Logger.LogInformation("User created an account with external provider ({Provider}).", externalLoginInfo.LoginProvider);

        // Generujemy kod potwierdzający email
        var userId = await UserManager.GetUserIdAsync(customer);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(customer);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        // Wysyłamy link z potwierdzeniem
        bool success = true;
        try
        {
            await EmailSender.SendConfirmationLinkAsync(customer, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        }
        catch (InvalidOperationException)
        {
            success = false;
        }

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email, ["success"] = success });
            return;
        }

        // Logujemy użytkownika
        await SignInManager.SignInAsync(customer, isPersistent: false, externalLoginInfo.LoginProvider);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private Customer CreateCustomer()
    {
        try
        {
            return Activator.CreateInstance<Customer>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Customer)}'. " +
                $"Ensure that '{nameof(Customer)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        public string FirstName { get; set; } = "";

        [Required]
        public string LastName { get; set; } = "";

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; } = DateTime.Today;

        [Required]
        public int DriverLicenseYear { get; set; } = DateTime.Now.Year;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}